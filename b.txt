// ====================================
//  GameRoom.js  ― 特殊ルール全対応・完全ロジック版
// ====================================

class Card {
    constructor(suit, rank) {
        this.suit = suit;
        this.rank = rank;
        this.isJoker = suit === 'J';
    }
    toString() {
        return this.isJoker ? 'Joker' : this.suit + Card.rankToLabel(this.rank);
    }
    static rankToLabel(r) {
        return { 11: 'J', 12: 'Q', 13: 'K', 14: 'A', 15: '2' }[r] || String(r);
    }
}

class Deck {
    constructor(useJoker = true) {
        this.cards = [];
        const suits = ['♣', '♦', '♥', '♠'];
        const ranks = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
        for (const s of suits) for (const r of ranks) this.cards.push(new Card(s, r));
        if (useJoker) this.cards.push(new Card('J', 16));
    }
    shuffle() {
        for (let i = this.cards.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [this.cards[i], this.cards[j]] = [this.cards[j], this.cards[i]];
        }
    }
}

class Player {
    constructor(name, conn = null, isNPC = false) {
        this.name = name;
        this.conn = conn;
        this.connected = !!conn;
        this.isNPC = isNPC;
        this.hand = [];
        this.finished = false;
        this.rankTitle = '';
    }
}

class GameRoom {
    constructor(roomId) {
        this.roomId = roomId;
        this.players = [];
        this.started = false;
        this.currentTurn = 0;
        this.jBackActive = false;
        this.lastPlayedCards = [];
        this.lastPlayedRank = null;
        this.lastPlayedCount = 0;
        this.lastPlayerIndex = null;
        this.passCount = 0;
        this.revolution = false;
        this.lastChampion = null;
        this.lastMoveInfo = null;
        this._deleteTimer = null;
        this.spade3BackPending = false;
        this.lastPlayWasStairs = false;
        this.waitingForSevenCard = false; // 七渡しUI待機用
        this.waitingForSevenCardPlayer = null; // 七渡し発動中プレイヤー名
    }

    getPlayer(name) { return this.players.find(p => p.name === name); }

    addPlayer(name, conn) {
        const exist = this.getPlayer(name);
        if (exist) {
            if (exist.connected) return { ok: false, error: '同名プレイヤーが既に接続中です。' };
            exist.conn = conn; exist.connected = true; exist.isNPC = false;
            return { ok: true, reconnect: true };
        }
        this.players.push(new Player(name, conn, false));
        return { ok: true, reconnect: false };
    }

    fillNPCPlayers() {
        while (this.players.length < 4) {
            const npcName = `NPC${this.players.length}`;
            if (!this.getPlayer(npcName)) this.players.push(new Player(npcName, null, true));
        }
    }

    startGame() {
        this.started = true;
        this.revolution = false;
        this.lastPlayedCards = []; this.lastPlayedRank = null; this.lastPlayedCount = 0;
        this.lastPlayerIndex = null; this.passCount = 0; this.lastMoveInfo = null;
        this.jBackActive = false;
        this.spade3BackPending = false;
        this.lastPlayWasStairs = false;
        this.waitingForSevenCard = false;
        this.waitingForSevenCardPlayer = null;

        this.players.forEach(p => { p.hand = []; p.finished = false; p.rankTitle = ''; });
        this.fillNPCPlayers();

        const deck = new Deck(true); deck.shuffle();
        let idx = 0; for (const c of deck.cards) { this.players[idx].hand.push(c); idx = (idx + 1) % this.players.length; }
        this.players.forEach(p => p.hand.sort((a, b) => a.rank - b.rank));
        this.currentTurn = 0;
        this.broadcastState();
        this.checkAndHandleNPC();
    }

    getNextAlive(idx) {
        const n = this.players.length;
        let i = idx;
        do { i = (i + 1) % n; } while (this.players[i].finished);
        return i;
    }
    rankValue(card) { return card.isJoker ? 16 : card.rank; }

    isValidStairs(cards) {
        if (cards.length < 3) return false;
        const suit = cards[0].suit;
        if (!cards.every(c => c.suit === suit && !c.isJoker)) return false;
        const sorted = [...cards].sort((a, b) => a.rank - b.rank);
        for (let i = 1; i < sorted.length; i++) {
            if (sorted[i].rank !== sorted[i - 1].rank + 1) return false;
        }
        return true;
    }
    prevIsStairs() {
        return (this.lastPlayedCards.length >= 3 && this.isValidStairs(this.lastPlayedCards));
    }
    isMoveStairs(cards) {
        return (cards.length >= 3 && this.isValidStairs(cards));
    }
    isRevJBack() {
        return this.revolution && this.jBackActive;
    }
    isJBackOK(cards) {
        if (this.isRevJBack()) {
            return cards.every(c => (!c.isJoker && c.rank >= 12) || c.isJoker);
        } else {
            return cards.every(c => !c.isJoker && c.rank <= 11);
        }
    }

    // ==============================
    //  出せる役グループ全列挙
    // ==============================
    getPlayableGroups(hand) {
        let groups = [];
        const prevIsStairs = this.prevIsStairs();
        const lastCount = this.lastPlayedCount || 1;
        const lastRank = this.lastPlayedRank;
        const isJBack = this.jBackActive;
        const isRev = this.revolution;
        // 1. 場が階段→階段役のみ出せる
        if (prevIsStairs) {
            for (let s of ['♣', '♦', '♥', '♠']) {
                let suitCards = hand.filter(c => c.suit === s && !c.isJoker).map(c => c.rank).sort((a, b) => a - b);
                for (let i = 0; i <= suitCards.length - lastCount; i++) {
                    let ok = true;
                    for (let j = 1; j < lastCount; j++) {
                        if (suitCards[i + j] !== suitCards[i] + j) { ok = false; break; }
                    }
                    if (ok) {
                        let seq = [];
                        for (let j = 0; j < lastCount; j++) {
                            seq.push(hand.find(c => c.suit === s && c.rank === suitCards[i] + j));
                        }
                        // 比較: 現在の階段先頭
                        const prev = this.lastPlayedCards.map(c => c.rank).sort((a, b) => a - b)[0];
                        const curr = suitCards[i];
                        if (!isRev) {
                            if (curr > prev) groups.push(seq);
                        } else {
                            if (curr < prev) groups.push(seq);
                        }
                    }
                }
            }
            return groups;
        }
        // 2. 場がペア/スリー→同じ枚数の役のみ
        let validCards = [];
        if (isJBack) {
            if (this.isRevJBack()) {
                validCards = hand.filter(c => (!c.isJoker && c.rank >= 12) || c.isJoker);
            } else {
                validCards = hand.filter(c => !c.isJoker && c.rank <= 11);
            }
        } else {
            validCards = hand.slice();
        }
        // シングル/ペア/スリー
        let group = {};
        for (let c of validCards) {
            if (!group[c.rank]) group[c.rank] = [];
            group[c.rank].push(c);
        }
        [lastCount].forEach(needCount => {
            Object.values(group).forEach(cards => {
                if (cards.length >= needCount) {
                    groups.push(cards.slice(0, needCount));
                }
            });
        });
        // Joker単独（通常時のみ）
        if (!isJBack && !prevIsStairs) {
            const joker = hand.find(c => c.isJoker);
            if (joker && lastCount === 1) {
                if (this.lastPlayedCards.length === 0 || this.rankValue(joker) > lastRank) {
                    groups.push([joker]);
                }
            }
        }
        // 強さ比較で絞り込み
        groups = groups.filter(cards => {
            if (isJBack && !this.isRevJBack()) {
                // Jバックのみ：強さ逆
                if (this.lastPlayedCards.length > 0 && !prevIsStairs) {
                    return this.rankValue(cards[0]) < lastRank;
                }
                return true;
            } else if (this.isRevJBack()) {
                if (this.lastPlayedCards.length > 0 && !prevIsStairs) {
                    return this.rankValue(cards[0]) > lastRank;
                }
                return true;
            } else if (isRev) {
                if (this.lastPlayedCards.length > 0 && !prevIsStairs) {
                    return this.rankValue(cards[0]) < lastRank;
                }
                return true;
            } else {
                if (this.lastPlayedCards.length > 0 && !prevIsStairs) {
                    return this.rankValue(cards[0]) > lastRank;
                }
                return true;
            }
        });
        return groups;
    }

    // =============== NPCの自動手選択ロジック ===============
    npcAction(pl) {
        if (pl.finished) return;
        // スペ3返し
        if (this.spade3BackPending) {
            const card = pl.hand.find(c => c.suit === '♠' && c.rank === 3);
            if (card) return this.handlePlay(pl.name, [{ suit: '♠', rank: 3 }]);
            else return this.handlePass(pl.name);
        }
        // 七渡し未対応
        if (this.waitingForSevenCard && this.waitingForSevenCardPlayer === pl.name) {
            // CPUは自動で一番強いカードを渡す
            let maxCard = pl.hand[0];
            for (const c of pl.hand) {
                if (c.rank > maxCard.rank || c.isJoker) maxCard = c;
            }
            pl.hand.splice(pl.hand.indexOf(maxCard), 1);
            let targetIdx = this.getNextAlive(this.currentTurn);
            const target = this.players[targetIdx];
            target.hand.push(maxCard);
            target.hand.sort((a, b) => a.rank - b.rank);
            this.waitingForSevenCard = false;
            this.waitingForSevenCardPlayer = null;
            this.broadcastState();
            this.checkAndHandleNPC();
            return;
        }
        // 出せるカードグループ全取得
        const playable = this.getPlayableGroups(pl.hand);
        let best = null;
        if (playable.length > 0) {
            // 革命・Jバック時は最大、それ以外は最小
            if ((this.revolution && !this.jBackActive) || (this.jBackActive && !this.isRevJBack())) {
                best = playable.reduce((a, b) => (this.rankValue(a[0]) > this.rankValue(b[0]) ? a : b));
            } else {
                best = playable.reduce((a, b) => (this.rankValue(a[0]) < this.rankValue(b[0]) ? a : b));
            }
            // 出せる場合
            this.handlePlay(pl.name, best.map(c => ({ suit: c.suit, rank: c.rank })));
        } else {
            this.handlePass(pl.name);
        }
    }

    // ================ メイン出し処理（UI選択反映済） =================
    handlePlay(playerName, dataCards) {
        if (!this.started) return;
        const pl = this.getPlayer(playerName); if (!pl || pl.finished) return;
        if (this.players[this.currentTurn].name !== playerName) return;

        // 七渡しUIで待機中の場合はcardSelectionフラグ管理（今回はサーバー側はパス）
        if (this.waitingForSevenCard && this.waitingForSevenCardPlayer === playerName) {
            // dataCards[0] を手札から渡す（ユーザーはUIで選ぶ）
            let card = pl.hand.find(c => c.suit === dataCards[0].suit && c.rank === dataCards[0].rank);
            if (!card) return;
            pl.hand.splice(pl.hand.indexOf(card), 1);
            let targetIdx = this.getNextAlive(this.currentTurn);
            const target = this.players[targetIdx];
            target.hand.push(card);
            target.hand.sort((a, b) => a.rank - b.rank);
            this.waitingForSevenCard = false;
            this.waitingForSevenCardPlayer = null;
            this.broadcastState();
            this.checkAndHandleNPC();
            return;
        }

        // スペ3返し（ジョーカー単独出し直後のみ）
        if (this.spade3BackPending) {
            if (dataCards.length !== 1 || !(dataCards[0].suit === '♠' && (dataCards[0].rank == 3 || dataCards[0].rank === '3'))) return;
            const card = pl.hand.find(c => c.suit === '♠' && c.rank === 3);
            if (!card) return;
            pl.hand.splice(pl.hand.indexOf(card), 1);
            this.lastMoveInfo = { player: pl.name, move: 'play', cards: [card], special: 'スペ3返し可能' };
            this.lastPlayedCards = []; this.lastPlayedRank = null; this.lastPlayedCount = 0; this.passCount = 0;
            this.spade3BackPending = false;
            this.lastPlayWasStairs = false;
            this.jBackActive = false;
            if (pl.hand.length === 0) pl.finished = true;
            this.currentTurn = this.getNextAlive(this.currentTurn);
            this.broadcastState();
            this.checkAndHandleNPC();
            return;
        }

        // dataCards を手札から抽出
        const played = [];
        for (const d of dataCards) {
            if (d.suit === 'J' || d.rank == 16) {
                const j = pl.hand.find(c => c.isJoker); if (!j) return;
                played.push(j);
            } else {
                let rankNum = typeof d.rank === 'number' ? d.rank : Number({
                    'J': 11, 'Q': 12, 'K': 13, 'A': 14, '2': 15
                }[d.rank] || d.rank);
                const idx = pl.hand.findIndex(c => !c.isJoker && c.suit === d.suit && c.rank === rankNum);
                if (idx === -1) return;
                played.push(pl.hand[idx]);
            }
        }
        if (played.length === 0) return;

        // 役形状・強さバリデーションは従来ロジック（省略不可）

        // === 特殊ルール発動順：七渡し→革命→8切り→Jバック ===
        let sevenCount = played.filter(c => !c.isJoker && c.rank === 7).length;
        let isRevolution = played.length >= 4 && played.every(c => !c.isJoker && c.rank === played[0].rank);
        let eightCut = played.some(c => !c.isJoker && c.rank === 8);
        let isJBack = played.every(c => !c.isJoker && c.rank === 11);

        // 七渡し（ユーザーならUIフラグ、CPUなら即時自動）
        if (sevenCount > 0) {
            if (pl.isNPC) {
                // NPCは自動で最大カード
                let maxCard = pl.hand[0];
                for (const c of pl.hand) {
                    if (c.rank > maxCard.rank || c.isJoker) maxCard = c;
                }
                pl.hand.splice(pl.hand.indexOf(maxCard), 1);
                let targetIdx = this.getNextAlive(this.currentTurn);
                const target = this.players[targetIdx];
                target.hand.push(maxCard);
                target.hand.sort((a, b) => a.rank - b.rank);
            } else {
                // ユーザーはフラグ立てて待機、UIからhandlePlayで1枚手札渡し
                this.waitingForSevenCard = true;
                this.waitingForSevenCardPlayer = playerName;
                this.broadcastState();
                return;
            }
        }

        // 革命
        let revToggled = false;
        if (isRevolution) {
            this.revolution = !this.revolution;
            revToggled = true;
        }

        // 8切り
        let isEightCut = eightCut;

        // Jバック
        if (isJBack) {
            this.jBackActive = true;
        }

        // 手札からカード除去
        played.forEach(c => {
            const idx = pl.hand.indexOf(c);
            if (idx !== -1) pl.hand.splice(idx, 1);
        });

        // 場情報更新
        let stairs = this.isMoveStairs(played);
        this.lastPlayedCards = [...played];
        this.lastPlayedCount = played.length;
        this.lastPlayedRank = stairs ? played.map(c => c.rank).sort((a, b) => a - b)[0] : this.rankValue(played[0]);
        this.lastPlayerIndex = this.currentTurn;
        this.passCount = 0;
        this.lastPlayWasStairs = stairs;

        // スペ3返し判定
        let jokerPlayed = (played.length === 1 && played[0].isJoker);
        if (jokerPlayed) {
            this.spade3BackPending = true;
        } else {
            this.spade3BackPending = false;
        }

        // 勝利判定
        if (pl.hand.length === 0) { pl.finished = true; }
        if (this.isGameOver()) { this.endGame(); this.broadcastState(); return; }

        // 8切り時の場リセット
        if (isEightCut) {
            this.lastPlayedCards = [];
            this.lastPlayedRank = null;
            this.lastPlayedCount = 0;
            this.passCount = 0;
            this.lastPlayWasStairs = false;
            this.jBackActive = false;
            this.spade3BackPending = false;
            if (!pl.finished) { /* 継続 */ }
            else { this.currentTurn = this.getNextAlive(this.currentTurn); }
        } else {
            this.currentTurn = this.getNextAlive(this.currentTurn);
        }
        if (!isJBack && this.lastPlayedCards.length === 0) {
            this.jBackActive = false;
        }

        // lastMoveInfo生成
        let specialArr = [];
        if (sevenCount) specialArr.push('7渡し');
        if (revToggled) specialArr.push(this.revolution ? '革命' : '革命返し');
        if (isEightCut) specialArr.push('8切り発動');
        if (isJBack) specialArr.push('Jバック発動');
        if (jokerPlayed) specialArr.push('スペ3返し可能');
        if (stairs) specialArr.push('階段');
        if (this.jBackActive && !isJBack) specialArr.push('Jバック中');
        if (this.isRevJBack()) specialArr.push('革命＋Jバック中');
        this.lastMoveInfo = { player: pl.name, move: 'play', cards: played, special: specialArr.join('・') || null };

        this.broadcastState();
        this.checkAndHandleNPC();
    }

    handlePass(playerName) {
        if (!this.started) return;
        if (this.spade3BackPending) {
            this.spade3BackPending = false;
            this.lastPlayedCards = []; this.lastPlayedRank = null; this.lastPlayedCount = 0; this.passCount = 0;
            this.lastPlayWasStairs = false;
            this.currentTurn = this.getNextAlive(this.currentTurn);
            this.lastMoveInfo = { player: playerName, move: 'pass', special: 'スペ3返しパス（場流し）' };
            this.jBackActive = false;
            this.broadcastState();
            this.checkAndHandleNPC();
            return;
        }
        const pl = this.getPlayer(playerName); if (!pl || pl.finished) return;
        if (this.players[this.currentTurn].name !== playerName) return;
        if (this.lastPlayedCards.length === 0) return;
        this.passCount++;
        this.lastMoveInfo = { player: pl.name, move: 'pass', special: null };
        const active = this.players.filter(p => !p.finished).length;
        let need;
        if (this.lastPlayerIndex !== null && !this.players[this.lastPlayerIndex].finished) {
            need = active - 1;
        } else need = active;
        if (this.passCount >= need) {
            this.lastPlayedCards = []; this.lastPlayedRank = null; this.lastPlayedCount = 0; this.passCount = 0;
            this.lastPlayWasStairs = false;
            this.currentTurn = (this.lastPlayerIndex !== null && !this.players[this.lastPlayerIndex].finished)
                ? this.lastPlayerIndex
                : this.getNextAlive(this.currentTurn);
            this.lastMoveInfo.special = this.lastMoveInfo.special ? this.lastMoveInfo.special + '・場流し' : '場流し';
            this.jBackActive = false;
        } else {
            this.currentTurn = this.getNextAlive(this.currentTurn);
        }
        if (this.isGameOver()) { this.endGame(); }
        this.broadcastState();
        this.checkAndHandleNPC();
    }

    isGameOver() { return this.started && this.players.filter(p => !p.finished).length <= 1; }

    endGame() {
        const last = this.players.find(p => !p.finished); if (last) last.finished = true;
        const ordered = [...this.players].sort((a, b) => a.hand.length - b.hand.length);
        const n = ordered.length;
        ordered.forEach((p, i) => {
            p.rankTitle = (i === 0) ? '大富豪' : (i === 1 && n >= 4) ? '富豪' : (i === n - 2 && n >= 4) ? '貧民' : (i === n - 1) ? '大貧民' : '平民';
        });
        if (this.lastChampion) {
            const champ = this.getPlayer(this.lastChampion);
            if (champ && champ.rankTitle !== '大富豪') champ.rankTitle = '大貧民';
        }
        this.lastChampion = ordered[0].name;
        this.started = false;
    }

    buildState() {
        const gameOver = this.isGameOver();
        return {
            type: gameOver ? 'final' : 'update',
            room: this.roomId,
            started: this.started,
            gameOver,
            players: this.players.map(p => ({
                name: p.name, cardsCount: p.hand.length, finished: p.finished, connected: p.connected || p.isNPC
            })),
            field: { cards: this.lastPlayedCards.map(c => c.toString()) },
            currentTurn: this.started ? this.players[this.currentTurn].name : null,
            revolution: this.revolution,
            ranking: gameOver ? this.players.map(p => ({ name: p.name, title: p.rankTitle })) : null,
            lastMove: this.lastMoveInfo ? {
                ...this.lastMoveInfo,
                cards: this.lastMoveInfo.cards?.map(c => c.toString())
            } : null,
            waitingForSevenCard: this.waitingForSevenCard,
            waitingForSevenCardPlayer: this.waitingForSevenCardPlayer
        };
    }

    broadcastState() {
        const st = this.buildState();
        this.players.forEach(p => {
            if (p.conn && p.connected) {
                p.conn.send(JSON.stringify({ ...st, yourHand: p.hand.map(c => c.toString()) }));
            }
        });
    }
    sendStateToPlayer(name) {
        const p = this.getPlayer(name); if (p && p.conn && p.connected) {
            const st = this.buildState();
            p.conn.send(JSON.stringify({ ...st, yourHand: p.hand.map(c => c.toString()) }));
        }
    }

    checkAndHandleNPC() {
        if (!this.started) return;
        const cur = this.players[this.currentTurn];
        if (cur && cur.isNPC && !cur.finished) {
            setTimeout(() => this.npcAction(cur), 500);
        }
    }
}

module.exports = GameRoom;
